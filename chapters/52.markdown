# 外部命令

Vim遵循UNIX哲学"做一件事，做好它"。 与其试图集成你可能想要的功能到编辑器自身，更好的办法是在适当时使用Vim来调用外部命令。

让我们在插件中添加一些跟Potion编译器交互的命令，来浅尝在Vim里面调用外部命令的方法。

## 编译

首先我们将加入一个命令来编译和执行当前Potion文件。 有很多方法可以实现这一点，不过我们暂且用外部命令简单地实现。

在你的插件的repo中创建`potion/ftplugin/potion/running.vim`文件。
这将是我们创建编译和执行Potion文件的映射的地方。

    
    
    if !exists("g:potion_command")
        let g:potion_command = "potion"
    endif
    
    function! PotionCompileAndRunFile()
        silent !clear
        execute "!" . g:potion_command . " " . bufname("%")
    endfunction
    
    nnoremap <buffer> <localleader>r :call PotionCompileAndRunFile()<cr>

第一部分以全局变量的形式储存着用来执行Potion代码的命令，如果还没有设置过的话。 我们之前见过类似的检查了。

如果`potion`不在用户的`$PATH`内，这将允许用户覆盖掉它， 比如在`~/.vimrc`添加类似`let g:potion_command =
"/Users/sjl/src/potion/potion"`的一行。

最后一行添加了一个buffer-local的映射来调用我们前面定义的函数。
不要忘了，由于这个文件位于`ftdetect/potion`文件夹，每次一个文件的`filetype`设置成`potion`，它都会被执行。

真正实现了功能的地方在`PotionCompileAndRunFile()`。
保存文件，打开`factorial.pn`并按下`<localleader>r`来执行这个映射，看看发生了什么。

如果`potion`位于你的`$PATH`下，代码会被执行，你应该在终端看到输出(或者在窗口底部，如果你用的是GUI vim)。
如果你看到了没有找到`potion`命令的错误，你需要像上面提到那样在`~/.vimrc`内设置`g:potion_command`。

让我们了解一下`PotionCompileAndRunFile()`的工作原理。

## Bang!

`:!`命令(念作"bang")会执行外部命令并在屏幕上显示它们的输出。尝试执行下面的命令：

    
    
    :!ls

Vim将输出`ls`命令的结果，同时还有"请按 ENTER 或其它命令继续"的提示。

当这样执行时，Vim不会传递任何输入给外部命令。为了验证，执行：

    
    
    :!cat

打入一些行，然后你将看到`cat`命令把它们都吐回来了，就像你是在Vim之外执行`cat`。按下Ctrl-D来结束。

想要执行一个外部命令并避免`请按 ENTER 或其它命令继续`的提示，使用`:silent !`。执行下面的命令：

    
    
    :silent !echo Hello, world.

如果在GUI Vim比如MacVim或gVim下执行，你将不会看到`Hello,world.`的输出。

如果你在终端下执行，你看到的结果取决于你的配置。 一旦执行了一个`:silent !`，你可能需要执行`:redraw!`来重新刷新屏幕。

注意这个命令是`:silent !`而不是`:silent!`(看到空格了吗？)！ 这是两个不一样的命令，我们想要的是前者！Vimscript奇妙吧？

让我们回到`PotionCompileAndRun()`上来：

    
    
    function! PotionCompileAndRunFile()
        silent !clear
        execute "!" . g:potion_command . " " . bufname("%")
    endfunction

首先我们执行一个`silent !clear`命令，来清空屏幕输出并避免产生提示。
这将确保我们仅仅看到本次命令的输出，如果一再执行同样的命令，你会觉得有用的。

在下一行我们使用老朋友`execute`来动态创建一个命令。建立的命令看上去类似于：

    
    
    !potion factorial.pn

注意这里没有`silent`，所以用户将看到命令输出，并不得不按下enter来返回Vim。 这就是我们想要的，所以就这样设置好了。

## 显示字节码

Potion编译器有一个显示由它生成的字节码的选项。如果你正试图在非常低级的层次下debug，这将帮上忙。 在shell里执行下面的命令：

    
    
    potion -c -V factorial.pn

你将看到一大堆像这样的输出：

